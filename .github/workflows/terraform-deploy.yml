name: 'Terraform Deploy'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - apply
        - destroy

permissions:
  contents: read
  id-token: write

jobs:
  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    environment: 
      name: production
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform Backend
      id: backend
      run: |
        # Create resource group for Terraform state if it doesn't exist
        az group create --name "tfstate-rg" --location "East US" --tags "ManagedBy=terraform" "Purpose=tfstate" || true
        
        # Create storage account for Terraform state if it doesn't exist
        STORAGE_ACCOUNT_NAME="tfstate${{ secrets.AZURE_SUBSCRIPTION_ID }}$(echo $RANDOM | md5sum | head -c 6)"
        STORAGE_ACCOUNT_NAME=$(echo $STORAGE_ACCOUNT_NAME | tr '[:upper:]' '[:lower:]' | head -c 24)
        
        # Try to get existing storage account first
        EXISTING_ACCOUNT=$(az storage account list --resource-group "tfstate-rg" --query "[?tags.Purpose=='tfstate'].name | [0]" -o tsv)
        if [ ! -z "$EXISTING_ACCOUNT" ]; then
          STORAGE_ACCOUNT_NAME=$EXISTING_ACCOUNT
          echo "Using existing storage account: $STORAGE_ACCOUNT_NAME"
        else
          az storage account create \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group "tfstate-rg" \
            --location "East US" \
            --sku "Standard_LRS" \
            --tags "ManagedBy=terraform" "Purpose=tfstate"
          echo "Created new storage account: $STORAGE_ACCOUNT_NAME"
        fi
        
        # Create container for Terraform state if it doesn't exist
        az storage container create \
          --name "tfstate" \
          --account-name $STORAGE_ACCOUNT_NAME || true
        
        # Export for later steps
        echo "TERRAFORM_STORAGE_ACCOUNT=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "storage_account=$STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=tfstate-rg" \
          -backend-config="storage_account_name=$TERRAFORM_STORAGE_ACCOUNT" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform.tfstate"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
          terraform plan -destroy -no-color -input=false -out=tfplan
        else
          terraform plan -no-color -input=false -out=tfplan
        fi
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Terraform Apply
      id: deploy
      run: |
        terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Upload Terraform State
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-state
        path: |
          terraform/.terraform/
          terraform/terraform.tfstate*
        retention-days: 30

    - name: Deployment Summary
      run: |
        echo "## Terraform Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
          echo "✅ Resources destroyed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ Resources deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Resources:" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | select(.key | test("_name$")) | "- **\(.key | gsub("_"; " ") | gsub("\\b\\w"; ascii_upcase))**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "- Resource details available in Terraform outputs" >> $GITHUB_STEP_SUMMARY
        fi
