name: 'Terraform Deploy'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - apply
        - destroy

permissions:
  contents: read

jobs:
  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    environment: 
      name: production
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"
        terraform_wrapper: false

    - name: Azure CLI Login
      run: |
        az login --service-principal \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --password ${{ secrets.AZURE_CLIENT_SECRET }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform Backend Infrastructure
      id: backend
      run: |
        # Set storage account name for backend configuration
        STORAGE_ACCOUNT_NAME="tfstateb1a10c1deee275d0"
        echo "TERRAFORM_STORAGE_ACCOUNT=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "storage_account=$STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
        
        # Display backend configuration being used
        echo "✅ Using existing backend infrastructure:"
        echo "   • Resource Group: tfstate-rg" 
        echo "   • Storage Account: $STORAGE_ACCOUNT_NAME"
        echo "   • Container: tfstate"
        echo "   • Key: terraform.tfstate"
        
        echo "Backend infrastructure ready"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_CLI: false

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=tfstate-rg" \
          -backend-config="storage_account_name=$TERRAFORM_STORAGE_ACCOUNT" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform.tfstate"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_CLI: false

    - name: Terraform Validate
      run: terraform validate
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_CLI: false

    - name: Terraform Plan
      id: plan
      run: |
        if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
          terraform plan -destroy -no-color -input=false -out=tfplan
        else
          terraform plan -no-color -input=false -out=tfplan
        fi
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_CLI: false

    - name: Terraform Apply
      id: deploy
      run: |
        terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_CLI: false

    - name: Upload Terraform State
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-state
        path: |
          terraform/.terraform/
          terraform/terraform.tfstate*
        retention-days: 30

    - name: Deployment Summary
      run: |
        echo "## Terraform Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
          echo "✅ Resources destroyed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ Resources deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Resources:" >> $GITHUB_STEP_SUMMARY
          
          # Try to get terraform outputs, fallback to simple message if it fails
          if terraform output > /dev/null 2>&1; then
            echo "- **Resource Group**: $(terraform output -raw resource_group_name 2>/dev/null || echo 'Created')" >> $GITHUB_STEP_SUMMARY
            echo "- **Storage Account**: $(terraform output -raw storage_account_name 2>/dev/null || echo 'Created')" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Resource Group: Created" >> $GITHUB_STEP_SUMMARY
            echo "- Storage Account: Created" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure is now ready for use" >> $GITHUB_STEP_SUMMARY
          echo "- Check the Azure portal for deployed resources" >> $GITHUB_STEP_SUMMARY
        fi
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_CLI: false
